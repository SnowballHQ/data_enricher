"""
Configuration manager for handling environment variables and API keys
"""

import os
import json
from pathlib import Path
from typing import Optional

class ConfigManager:
    def __init__(self):
        self.config_file = Path("config.json")
        self.env_file = Path(".env")
        self.load_config()
    
    def load_config(self):
        """Load configuration from file or create default"""
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r') as f:
                    self.config = json.load(f)
            except:
                self.config = self.get_default_config()
        else:
            self.config = self.get_default_config()
            self.save_config()
    
    def get_default_config(self):
        """Get default configuration"""
        return {
            "openai_api_key": "",
            "openai_model": "gpt-5-nano",
        }
    
    def save_config(self):
        """Save configuration to file"""
        try:
            with open(self.config_file, 'w') as f:
                json.dump(self.config, f, indent=2)
        except Exception as e:
            print(f"Error saving config: {e}")
    
    def get_openai_api_key(self) -> Optional[str]:
        """Get OpenAI API key from configuration"""
        # First try environment variable
        env_key = os.getenv('OPENAI_API_KEY')
        if env_key:
            return env_key
        
        # Then try config file
        return self.config.get('openai_api_key')
    
    def set_openai_api_key(self, api_key: str):
        """Set OpenAI API key in configuration"""
        self.config['openai_api_key'] = api_key
        self.save_config()
        
        # Also set as environment variable for current session
        os.environ['OPENAI_API_KEY'] = api_key
    
    def get_openai_model(self) -> str:
        """Get OpenAI model from configuration"""
        return self.config.get('openai_model', 'gpt-5-nano')
    
    def get_openai_max_tokens(self) -> int:
        """Get OpenAI max tokens from configuration"""
        return self.config.get('openai_max_tokens', 100)
    
    def get_openai_temperature(self) -> float:
        """Get OpenAI temperature from configuration"""
        return self.config.get('openai_temperature', 0.1)
    
    def is_openai_configured(self) -> bool:
        """Check if OpenAI is properly configured"""
        api_key = self.get_openai_api_key()
        return bool(api_key and api_key.strip())
    
    def create_env_file(self):
        """Create .env file with current configuration"""
        env_content = f"""# OpenAI API Configuration
# This file is automatically generated by the system
OPENAI_API_KEY={self.config.get('openai_api_key', 'your_openai_api_key_here')}
OPENAI_MODEL={self.get_openai_model()}
OPENAI_MAX_TOKENS={self.get_openai_max_tokens()}
OPENAI_TEMPERATURE={self.get_openai_temperature()}
"""
        try:
            with open(self.env_file, 'w') as f:
                f.write(env_content)
            return True
        except Exception as e:
            print(f"Error creating .env file: {e}")
            return False
    
    def export_env_template(self):
        """Export environment template for manual setup"""
        template_content = f"""# OpenAI API Configuration
# Copy this file to .env and replace with your actual values
OPENAI_API_KEY=your_openai_api_key_here
OPENAI_MODEL={self.get_openai_model()}
OPENAI_MAX_TOKENS={self.get_openai_max_tokens()}
OPENAI_TEMPERATURE={self.get_openai_temperature()}
"""
        try:
            with open("env_template.txt", 'w') as f:
                f.write(template_content)
            return True
        except Exception as e:
            print(f"Error creating env template: {e}")
            return False
